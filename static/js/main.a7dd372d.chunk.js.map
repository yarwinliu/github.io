{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["linkFunc","document","getElementById","href","i","onreadystatechange","readyState","style","display","elem","width","id","setInterval","clearInterval","move","setTimeout","console","log","App","className","class","target","src","alt","height","border","title","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qOAGA,SAASA,IAEPC,SAASC,eAAe,QAAQC,KAAO,kEAGzC,IAAIC,EAAI,EAoBRH,SAASI,mBAAqB,WACA,aAAxBJ,SAASK,YACXL,SAASC,eAAe,WAAWK,MAAMC,QAAU,SACnDP,SAASC,eAAe,QAAQK,MAAMC,QAAU,OAtBpD,WACE,GAAU,IAANJ,EAAS,CAEXA,EAAI,EACJ,IAAIK,EAAOR,SAASC,eAAe,SAC/BQ,EAAQ,EACRC,EAAKC,aACT,WACMF,GAAS,KACXG,cAAcF,GACdP,EAAI,IAEJM,IACAD,EAAKF,MAAMG,MAAQA,EAAO,OAPF,IAiB5BI,IAEAC,YAAW,WACTC,QAAQC,IAAIhB,SAASK,YACrBL,SAASC,eAAe,WAAWK,MAAMC,QAAU,OACnDP,SAASC,eAAe,QAAQK,MAAMC,QAAU,SAC/C,MA+CQU,MA3Cf,WACE,OACE,yBAAKC,UAAU,OACf,0CAEE,yBAAKC,MAAM,WAAWT,GAAG,WACvB,yBAAKS,MAAM,MAAMT,GAAG,WAGtB,yBAAKQ,UAAY,aAAaR,GAAG,QAE/B,uBAAGA,GAAG,eAAeR,KAAK,8CAA8CkB,OAAO,SAC7E,yBAAKC,IAAI,sLACPC,IAAI,YAAYC,OAAO,MAAMC,OAAO,cAGxC,sDAMA,yBAAKN,UAAY,YACf,uBACER,GAAG,OACHR,KAAK,sBACLkB,OAAO,SAHT,+BAQA,4BACEK,MAAQ,gBACRC,QAAW3B,GAFb,SC7DU4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlC,SAASC,eAAe,SDyHpB,kBAAmBkC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3B,QAAQ2B,MAAMA,EAAMC,c","file":"static/js/main.a7dd372d.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction linkFunc(){\n  //change the link of \"can you find the right link\"\n  document.getElementById(\"link\").href = \"https://www.funimada.com/assets/images/cards/big/congrats-4.gif\"\n}\n\nvar i = 0;\nfunction move() {\n  if (i === 0) {\n    //move the progress bar \n    i = 1;\n    var elem = document.getElementById(\"myBar\");\n    var width = 1;\n    var id = setInterval(frame, 1);\n    function frame() {\n      if (width >= 100) {\n        clearInterval(id);\n        i = 0;\n      } else {\n        width++;\n        elem.style.width = width +\"%\";\n      }\n    }\n  }\n}\n\ndocument.onreadystatechange = function () {\n  if (document.readyState !== \"complete\") {\n    document.getElementById(\"progBar\").style.display = \"flex  \";\n    document.getElementById(\"text\").style.display = \"none\";\n    move(); \n  }else{\n    setTimeout(() => {\n      console.log(document.readyState);\n      document.getElementById(\"progBar\").style.display = \"none\";\n      document.getElementById(\"text\").style.display = \"flex\";\n    }, 400);\n  }\n}\n\nfunction App() {\n  return (      \n    <div className=\"App\">\n    <title> hello </title>\n\n      <div class=\"progress\" id=\"progBar\">\n        <div class=\"bar\" id=\"myBar\"></div>\n      </div>\n\n      <div className = \"App-header\" id=\"text\">\n\n        <a id=\"croissantpic\" href=\"https://www.youtube.com/watch?v=5C0QU5xrAi4\" target=\"blank\">\n          <img src=\"https://raster-static.postmates.com/?url=com.postmates.img.prod.s3.amazonaws.com%2F29554206-b272-467e-88c6-6ad05efdadba%2Forig.jpg&quality=85&mode=auto&format=jpg&v=4&w=1200&h=720\"\n            alt=\"croissant\" height=\"100\" border=\"2px blue\"></img>\n        </a>\n        \n        <h2>\n        Welcome to my website! \n        </h2>\n\n        \n\n        <div className = \"App-link\"> \n          <a \n            id=\"link\"\n            href=\"https://reactjs.org\"\n            target=\"blank\"\n          > \n          can you find the right link\n          </a>  \n\n          <button\n            title = \"are you sure?\" \n            onClick = {linkFunc} \n          > \n            ?\n          </button>\n        </div>\n      </div>\n    </div>\n    \n  );\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}